import {
  __commonJS
} from "./chunk-S5KM4IGW.js";

// node_modules/yup/lib/util/printValue.js
var require_printValue = __commonJS({
  "node_modules/yup/lib/util/printValue.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = printValue;
    var toString = Object.prototype.toString;
    var errorToString = Error.prototype.toString;
    var regExpToString = RegExp.prototype.toString;
    var symbolToString = typeof Symbol !== "undefined" ? Symbol.prototype.toString : () => "";
    var SYMBOL_REGEXP = /^Symbol\((.*)\)(.*)$/;
    function printNumber(val) {
      if (val != +val)
        return "NaN";
      const isNegativeZero = val === 0 && 1 / val < 0;
      return isNegativeZero ? "-0" : "" + val;
    }
    function printSimpleValue(val, quoteStrings = false) {
      if (val == null || val === true || val === false)
        return "" + val;
      const typeOf = typeof val;
      if (typeOf === "number")
        return printNumber(val);
      if (typeOf === "string")
        return quoteStrings ? `"${val}"` : val;
      if (typeOf === "function")
        return "[Function " + (val.name || "anonymous") + "]";
      if (typeOf === "symbol")
        return symbolToString.call(val).replace(SYMBOL_REGEXP, "Symbol($1)");
      const tag = toString.call(val).slice(8, -1);
      if (tag === "Date")
        return isNaN(val.getTime()) ? "" + val : val.toISOString(val);
      if (tag === "Error" || val instanceof Error)
        return "[" + errorToString.call(val) + "]";
      if (tag === "RegExp")
        return regExpToString.call(val);
      return null;
    }
    function printValue(value, quoteStrings) {
      let result = printSimpleValue(value, quoteStrings);
      if (result !== null)
        return result;
      return JSON.stringify(value, function(key, value2) {
        let result2 = printSimpleValue(this[key], quoteStrings);
        if (result2 !== null)
          return result2;
        return value2;
      }, 2);
    }
  }
});

// node_modules/yup/lib/locale.js
var require_locale = __commonJS({
  "node_modules/yup/lib/locale.js"(exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.string = exports.object = exports.number = exports.mixed = exports.default = exports.date = exports.boolean = exports.array = void 0;
    var _printValue = _interopRequireDefault(require_printValue());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var mixed = {
      default: "${path} is invalid",
      required: "${path} is a required field",
      oneOf: "${path} must be one of the following values: ${values}",
      notOneOf: "${path} must not be one of the following values: ${values}",
      notType: ({
        path,
        type,
        value,
        originalValue
      }) => {
        let isCast = originalValue != null && originalValue !== value;
        let msg = `${path} must be a \`${type}\` type, but the final value was: \`${(0, _printValue.default)(value, true)}\`` + (isCast ? ` (cast from the value \`${(0, _printValue.default)(originalValue, true)}\`).` : ".");
        if (value === null) {
          msg += `
 If "null" is intended as an empty value be sure to mark the schema as \`.nullable()\``;
        }
        return msg;
      },
      defined: "${path} must be defined"
    };
    exports.mixed = mixed;
    var string = {
      length: "${path} must be exactly ${length} characters",
      min: "${path} must be at least ${min} characters",
      max: "${path} must be at most ${max} characters",
      matches: '${path} must match the following: "${regex}"',
      email: "${path} must be a valid email",
      url: "${path} must be a valid URL",
      uuid: "${path} must be a valid UUID",
      trim: "${path} must be a trimmed string",
      lowercase: "${path} must be a lowercase string",
      uppercase: "${path} must be a upper case string"
    };
    exports.string = string;
    var number = {
      min: "${path} must be greater than or equal to ${min}",
      max: "${path} must be less than or equal to ${max}",
      lessThan: "${path} must be less than ${less}",
      moreThan: "${path} must be greater than ${more}",
      positive: "${path} must be a positive number",
      negative: "${path} must be a negative number",
      integer: "${path} must be an integer"
    };
    exports.number = number;
    var date = {
      min: "${path} field must be later than ${min}",
      max: "${path} field must be at earlier than ${max}"
    };
    exports.date = date;
    var boolean = {
      isValue: "${path} field must be ${value}"
    };
    exports.boolean = boolean;
    var object = {
      noUnknown: "${path} field has unspecified keys: ${unknown}"
    };
    exports.object = object;
    var array = {
      min: "${path} field must have at least ${min} items",
      max: "${path} field must have less than or equal to ${max} items",
      length: "${path} must have ${length} items"
    };
    exports.array = array;
    var _default = Object.assign(/* @__PURE__ */ Object.create(null), {
      mixed,
      string,
      number,
      date,
      object,
      array,
      boolean
    });
    exports.default = _default;
  }
});
export default require_locale();
//# sourceMappingURL=yup_lib_locale.js.map
